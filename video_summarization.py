# -*- coding: utf-8 -*-
"""video summarization.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1coiOQmT6jEKdEbMr9wzMx_d4pGXg75SZ
"""

from transformers import pipeline
from youtube_transcript_api import YouTubeTranscriptApi

youtube_vid="https://www.youtube.com/watch?v=YereI6Gn3bM&t=514s"

vid_id=youtube_vid.split("=")[1]

vid_id

from IPython.display import YouTubeVideo
YouTubeVideo(vid_id)

YouTubeTranscriptApi.get_transcript(vid_id)
transcript=YouTubeTranscriptApi.get_transcript(vid_id)

transcript[0:5]

result=""
for i in transcript:
  result+=' '+i['text']
print(len(result))

summarizer=pipeline('summarization')

num_iters=int(len(result)/1000)
summarized_text=[]
for i in range(0,num_iters+1):
  start=0
  start=i*1000
  end=(i+1)*1000
  out=summarizer(result[start:end])
  out=out[0]
  out=out['summary_text']
  summarized_text.append(out)
print(summarized_text)

print(len(summarized_text))

summarized_text

import spacy
from spacy.lang.en.stop_words import STOP_WORDS
from string import punctuation
from heapq import nlargest
nlp=spacy.load('en_core_web_sm')

def summarize_sentiment(text):
    stopwords=list(STOP_WORDS)
    nlp=spacy.load('en_core_web_sm')
    doc=nlp(text)
    tokens=[token.text for token in doc]
    word_freq={}
    for word in doc:
        if word.text.lower() not in stopwords:
            if word.text.lower() not in punctuation:
                if word.text not in word_freq.keys():
                    word_freq[word.text]=1
                else:
                    word_freq[word.text]+=1
    max_freq=max(word_freq.values())
    for word in word_freq.keys():
        word_freq[word]=word_freq[word]/max_freq
    sentence_tok=[sent for sent in doc.sents]
    sent_scores={}
    for sent in sentence_tok:
        for word in sent:
            if word.text.lower() in word_freq.keys():
                if sent not in sent_scores.keys():
                    sent_scores[sent]=word_freq[word.text.lower()]
                else:
                    sent_scores[sent]+=word_freq[word.text.lower()]
                    
                
    select_len=int(len(sentence_tok)*0.22)
    summary=nlargest(select_len,sent_scores,key=sent_scores.get)
    final_sum=[word.text for word in summary]
    summary=' '.join(final_sum)
    return(summary)

vid_sum=summarize_sentiment(str(summarized_text))

import torch

from transformers import BertForQuestionAnswering
model=BertForQuestionAnswering.from_pretrained('bert-large-uncased-whole-word-masking-finetuned-squad')

from transformers import BertTokenizer

tokenizer = BertTokenizer.from_pretrained('bert-large-uncased-whole-word-masking-finetuned-squad')

question="what will n layer do?"
answer="n layer will produce features that are more robust"

input_ids = tokenizer.encode(question, answer)

print('The input has a total of {:} tokens.'.format(len(input_ids)))

sep_index=input_ids.index(tokenizer.sep_token_id)
seg_a=sep_index+1
seg_b=len(input_ids)-seg_a
seg_ids=[0]*seg_a+[1]*seg_b
assert len(seg_ids)==len(input_ids)

output=model(torch.tensor([input_ids]),torch.tensor([seg_ids]),return_dict=True)
start_score=output.start_logits
end_score=output.end_logits

def answer_question(question, answer_text):
    input_ids = tokenizer.encode(question, answer_text)
    print('Query has {:,} tokens.\n'.format(len(input_ids)))
    sep_index = input_ids.index(tokenizer.sep_token_id)
    num_seg_a = sep_index + 1
    num_seg_b = len(input_ids) - num_seg_a
    segment_ids = [0]*num_seg_a + [1]*num_seg_b
    assert len(segment_ids) == len(input_ids)
    outputs = model(torch.tensor([input_ids]),token_type_ids=torch.tensor([segment_ids]),return_dict=True) 
    start_scores = outputs.start_logits
    end_scores = outputs.end_logits
    answer_start = torch.argmax(start_scores)
    answer_end = torch.argmax(end_scores)
    tokens = tokenizer.convert_ids_to_tokens(input_ids)
    answer = tokens[answer_start]
    for i in range(answer_start + 1, answer_end + 1):
        if tokens[i][0:2] == '##':
            answer += tokens[i][2:]
        else:
            answer += ' ' + tokens[i]
    print('Answer: "' + answer + '"')

import textwrap
wrapper = textwrap.TextWrapper(width=80) 
bert_abstract = summarize_sentiment(str(summarized_text))
print(wrapper.fill(bert_abstract))

question = "What does neural network do?"

answer_question(question, bert_abstract)

question="why do we use deep learning?"
answer_question(question,bert_abstract)

question = "What did baidu do?"

answer_question(question, bert_abstract)

question = "What are the variations in speech text?"

answer_question(question, bert_abstract)

question = "how much hours of audio required for effective speech recognition ?"

answer_question(question, bert_abstract)

question = "What is this speech is about ?"

answer_question(question, bert_abstract)

